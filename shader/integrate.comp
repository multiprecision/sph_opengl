// Copyright (c) 2017-2018, Samuel Ivan Gunadi
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define WORK_GROUP_SIZE 128

layout (local_size_x = WORK_GROUP_SIZE) in;

// constants
#define NUM_PARTICLES 20000

#define TIME_STEP 0.0001f
#define WALL_DAMPING 0.3f

layout(std430, binding = 0) buffer position_block
{
    vec2 position[];
};

layout(std430, binding = 1) buffer velocity_block
{
    vec2 velocity[];
};

layout(std430, binding = 2) buffer force_block
{
    vec2 force[];
};

layout(std430, binding = 3) buffer density_block
{
    float density[];
};

layout(std430, binding = 4) buffer pressure_block
{
    float pressure[];
};

void main()
{
    uint i = gl_GlobalInvocationID.x;

    // integrate
    vec2 acceleration = force[i] / density[i];
    vec2 new_velocity = velocity[i] + TIME_STEP * acceleration;
    vec2 new_position = position[i] + TIME_STEP * new_velocity;

    // boundary conditions
    if (new_position.x < -1)
    {
        new_position.x = -1;
        new_velocity.x *= -1 * WALL_DAMPING;
    }
    else if (new_position.x > 1)
    {
        new_position.x = 1;
        new_velocity.x *= -1 * WALL_DAMPING;
    }
    else if (new_position.y < -1)
    {
        new_position.y = -1;
        new_velocity.y *= -1 * WALL_DAMPING;
    }
    else if (new_position.y > 1)
    {
        new_position.y = 1;
        new_velocity.y *= -1 * WALL_DAMPING;
    }

    velocity[i] = new_velocity;
    position[i] = new_position;
}
